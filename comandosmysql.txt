CRIANDO E EXCLUINDO BANCO DE DADOS:

CREATE DATABASE	db_curso_web;
DROP DATABASE db_curso_web;

//------------------------

TABELAS E TIPOS DE DADOS:

CREATE TABLE tb_cursos(
	id_curso int not null,
    imagem_curso varchar(100) not null,
    nome_curso char(50) not null,
    resumo text null,
    data_cadastro datetime not null,
    ativo boolean DEFAULT true,
    investimento float (8,2) default 0
);

DROP TABLE tb_cursos;

//------------------------

EDITANDO NOMES DE TABELA:

RENAME TABLE `db_curso_web`.`tb_cursos` TO `db_curso_web`.`tb_cursos_teste`;

RENAME TABLE tb_cursos_teste TO tb_cursos;

//------------------------

INCLUINDO, EDITANDO E REMOVENDO COLUNAS DE TABELAS:

ALTER TABLE tb_cursos ADD COLUMN carga_horaria VARCHAR(5) NOT NULL;

ALTER TABLE tb_cursos CHANGE carga_horaria carga_hora INT(5) NULL;

ALTER TABLE tb_cursos CHANGE carga_hora carga_horaria INT(5);

ALTER TABLE tb_cursos DROP carga_horaria;

ALTER TABLE tb_cursos ADD carga_horaria INT(5) NULL;

//------------------------

INSERT - INSERINDO DADOS EM TABELA:

INSERT INTO tb_cursos(ativo, carga_horaria, data_cadastro, id_curso, imagem_curso, investimento, nome_curso, resumo) VALUES (1, 35, '2018-07-27 12:25:35', 2, 'curso_angular.jpg', 575.86, 'Web Completo com JS, TS e Angular', 'Aprenda a criar aplicações front-end incríveis com Javascript, TypeScript e Angular'); 

INSERT INTO tb_cursos(ativo, carga_horaria, data_cadastro, id_curso, imagem_curso, investimento, nome_curso, resumo) VALUES (1, 15, '2018-07-27 00:00:00', 1, 'curso_node.jpg', 550.75, 'Curso Completo NodeJS e MongoDB', 'Cria aplicações back-end incriveis com a plataforma NodeJS e o banco de dados MongoDB'); 

//------------------------

SELECT - CONSULTANDO DADOS:

SELECT id_curso, resumo, ativo, carga_horaria, data_cadastro, imagem_curso, investimento, nome_curso FROM tb_cursos;

SELECT id_curso, resumo FROM tb_cursos;

SELECT * FROM tb_cursos;

//------------------------

POPULANDO O BANCO DE DADOS COM REGISTRO PARA TESTE:

CREATE TABLE tb_alunos (
  id_aluno int,
  nome varchar(255) default NULL,
  idade int default NULL,
  interesse varchar(255) default NULL,
  email varchar(255) default NULL,
  estado varchar(255) default NULL
);

//------------------------

SELECT - FILTROS COM OPERADORES DE COMPARAÇÃO:

SELECT * FROM tb_alunos WHERE interesse = 'Jogos';

SELECT * FROM `tb_alunos` WHERE idade < 25;

SELECT * FROM `tb_alunos` WHERE idade <= 25;

SELECT * FROM `tb_alunos` WHERE idade > 30;

SELECT * FROM `tb_alunos` WHERE idade >= 35;

//------------------------

SELECT - FILTROS COM OPERADORES LOGICOS:

SELECT * FROM `tb_alunos` WHERE interesse = 'Jogos' AND idade > 45;


SELECT * FROM `tb_alunos` WHERE interesse = 'Jogos' AND idade > 45 AND estado = 'RN';

SELECT * FROM `tb_alunos` WHERE interesse = 'Jogos' OR idade > 45;

//------------------------

SELECT - FILTROS COM O OPERADOR BETWEEN:

SELECT * FROM `tb_alunos` WHERE idade BETWEEN 18 AND 25;

//------------------------

SELECT - FILTROS COM O OPERADOR IN:

SELECT * FROM `tb_alunos` WHERE interesse = 'Jogos' OR interesse = 'Esporte' OR interesse = 'Música';



SELECT * FROM `tb_alunos` WHERE interesse IN('Jogos', 'Esporte', 'Música');


SELECT * FROM `tb_alunos` WHERE interesse NOT IN('Jogos', 'Esporte', 'Música');

//------------------------

SELECT - FILTROS COM O OPERADOR LIKE:

SELECT * FROM `tb_alunos` WHERE nome = 'Evelyn';

SELECT * FROM `tb_alunos` WHERE nome LIKE '%e';
SELECT * FROM `tb_alunos` WHERE nome LIKE '%ne';
SELECT * FROM `tb_alunos` WHERE nome LIKE '%a%';
SELECT * FROM `tb_alunos` WHERE nome LIKE 'C%';

SELECT * FROM `tb_alunos` WHERE nome LIKE '_riel';
SELECT * FROM `tb_alunos` WHERE nome LIKE '_ru_';

SELECT * FROM `tb_alunos` WHERE nome LIKE 'I__';

//------------------------

SELECT - ORDENANDO RESULTADOS:

SELECT * FROM `tb_alunos` WHERE idade BETWEEN 18 AND 59 ORDER BY nome ASC;

SELECT * FROM `tb_alunos` WHERE idade BETWEEN 18 AND 59 ORDER BY nome DESC;

SELECT * FROM `tb_alunos` WHERE idade BETWEEN 18 AND 59 ORDER BY nome ASC, idade DESC, estado ASC;

//------------------------

SELECT - LIMITANDO RETORNO:

SELECT * FROM `tb_alunos` LIMIT 25;

SELECT * FROM `tb_alunos` ORDER BY id_aluno DESC LIMIT 25;

SELECT * FROM `tb_alunos` LIMIT 4 OFFSET 0;

SELECT * FROM `tb_alunos` LIMIT 4 OFFSET 4;

SELECT * FROM `tb_alunos` LIMIT 4 OFFSET 8;

//------------------------

SELECT - FUNÇÕES DE AGREGAÇÃO PARTE 1; MAX, MIN, AVG:

SELECT MIN(investimento) FROM `tb_cursos`;


SELECT MIN(investimento) FROM `tb_cursos` WHERE ativo = true;


SELECT MAX(investimento) FROM `tb_cursos` WHERE ativo = true;


SELECT AVG(investimento) FROM `tb_cursos` WHERE ativo = true;

//------------------------

SELECT - FUNÇÕES DE AGREGAÇÃO MAX, MIN, AVG:

SELECT MIN(investimento) FROM `tb_cursos`;


SELECT MIN(investimento) FROM `tb_cursos` WHERE ativo = true;


SELECT MAX(investimento) FROM `tb_cursos` WHERE ativo = true;


SELECT AVG(investimento) FROM `tb_cursos` WHERE ativo = true;

//------------------------

SELECT SUM(investimento) FROM `tb_cursos`;



SELECT SUM(investimento) FROM `tb_cursos` WHERE ativo = true;


SELECT COUNT(*) FROM `tb_cursos` WHERE ativo = true;


SELECT COUNT(*) FROM `tb_cursos`;

//------------------------

SELECT * FROM `tb_alunos` GROUP BY interesse;

SELECT *, count(*) FROM `tb_alunos` GROUP BY interesse;

SELECT interesse, count(*) FROM `tb_alunos` GROUP BY interesse;


SELECT interesse, count(*) AS total_por_interesse FROM `tb_alunos` GROUP BY interesse;

SELECT * FROM `tb_alunos` GROUP BY estado;

SELECT estado, COUNT(*) AS total_por_interesse FROM `tb_alunos` WHERE estado = 'ES'; 

//------------------------

SELECT - AGRUPANDO SELEÇÃO DE REGISTROS:

SELECT * FROM `tb_alunos` GROUP BY interesse;

SELECT *, count(*) FROM `tb_alunos` GROUP BY interesse;

SELECT interesse, count(*) FROM `tb_alunos` GROUP BY interesse;


SELECT interesse, count(*) AS total_por_interesse FROM `tb_alunos` GROUP BY interesse;

SELECT * FROM `tb_alunos` GROUP BY estado;

SELECT estado, COUNT(*) AS total_por_interesse FROM `tb_alunos` WHERE estado = 'ES'; 

//------------------------

SELECT - FILTRANDO SELEÇÕES AGRUPADAS:

SELECT estado, COUNT(*) as total_de_registros FROM `tb_alunos` GROUP BY estado;

SELECT estado, COUNT(*) as total_de_registros FROM `tb_alunos` GROUP BY estado HAVING total_de_registros >= 5;

SELECT estado, COUNT(*) as total_de_registros FROM `tb_alunos` GROUP BY estado HAVING estado IN ('MG', 'SP');

SELECT estado, COUNT(*) as total_de_registros FROM `tb_alunos` GROUP BY estado HAVING estado IN ('CE', 'SC') AND total_de_registros > 4;

SELECT estado, COUNT(*) as total_de_registros FROM `tb_alunos` WHERE interesse != 'Esporte' GROUP BY estado HAVING total_de_registros > 3;

//------------------------

UPDATE - ATUALIZANDO REGISTROS:

UPDATE tb_alunos SET nome = 'João' WHERE id_aluno = 13;

UPDATE tb_alunos SET interesse = 'Saúde' WHERE idade >=80;


UPDATE tb_alunos SET nome = 'João' WHERE id_aluno = 18;


UPDATE tb_alunos SET nome = 'José', idade = 25, email = 'jose@gmail.com' WHERE id_aluno = 18;


SELECT * FROM `tb_alunos` WHERE idade BETWEEN 18 AND 25 AND estado = 'PA';

//------------------------

DELETE - EXCLUINDO REGISTROS: 

DELETE FROM tb_alunos WHERE id_aluno = 5;

SELECT * FROM `tb_alunos` WHERE idade IN(10,18,22,28,34) AND interesse = 'Esporte';

DELETE FROM `tb_alunos` WHERE idade IN(10,18,22,28,34) AND interesse = 'Esporte';

//------------------------

PROJETO LOJA VIRTUAL - RELACIONAMENTO UM PARA UM :

CREATE DATABASE bd_loja_virtual;

CREATE TABLE tb_produtos(
	id_produto INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	produto VARCHAR(200) NOT NULL,
	valor FLOAT(8,2) NOT NULL
);

CREATE TABLE tb_descricoes_tecnicas(
	id_descricao_tecnica INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	id_produto INT NOT NULL,
	descricao_tecnica TEXT NOT NULL,
	FOREIGN KEY(id_produto) REFERENCES tb_produtos(id_produto)
);


//------------------------

PROJETO LOJA VIRTUAL - RELACIONAMENTO UM PARA UM :

INSERT INTO tb_produtos(produto, valor) VALUES ('Notebook Dell Inspiron Ultrafino Intel Core i7, 16GB RAM e 240GB SSD', 3500.00);

INSERT INTO tb_produtos(produto, valor) VALUES ('Smart TV LED 40" Samsung Full HD 2 HDMI 1 USB Wi-Fi Integrado', 1475.54);

INSERT INTO tb_produtos(produto, valor) VALUES ('Smartphone LG K10 Dual Chip Android 7.0 4G Wi-Fi Câmera de 13MP', 629.99);


INSERT INTO tb_descricoes_tecnicas(id_produto, descricao_tecnica) VALUES (1, 'O novo Inspiron Dell oferece um design elegante e tela infinita que amplia seus sentidos, mantendo a sofisticação e medidas compactas...');

INSERT INTO tb_descricoes_tecnicas(id_produto, descricao_tecnica) VALUES (2, 'A smart TV da Samsung possui tela de 40" e oferece resolução Full HD, imagens duas vezes melhores que TVs HDs padrão...');

INSERT INTO tb_descricoes_tecnicas(id_produto, descricao_tecnica) VALUES (3, 'Saia da mesmice. O smartphone LG está mais divertido, rápido, fácil, cheio de selfies e com tela HD de incríveis 5,3"...');

//------------------------

PROJETO LOJA VIRTUAL - RELACIONAMENTO UM PARA MUITOS:

CREATE TABLE tb_imagens (
    id_imagem INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    id_produto INT NOT NULL,
    FOREIGN KEY (id_produto) REFERENCES tb_produtos(id_produto),
    url_imagem VARCHAR(200) NOT NULL
);

INSERT INTO tb_imagens(id_produto, url_imagem) VALUES (1, 'notebook_1.jpg'), (1, 'notebook_2.jpg'),
(1, 'notebook_3.jpg');

INSERT INTO tb_imagens(id_produto, url_imagem) VALUES (2, 'smarttv_1.jpg'), (2, 'smarttv_2.jpg');

INSERT INTO tb_imagens(id_produto, url_imagem) VALUES (3, 'smartphone_1.jpg');

//------------------------

PROJETO LOJA VIRTUAL - RELACIONAMENTO UM PARA MUITOS:

CREATE TABLE tb_imagens (
    id_imagem INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    id_produto INT NOT NULL,
    FOREIGN KEY (id_produto) REFERENCES tb_produtos(id_produto),
    url_imagem VARCHAR(200) NOT NULL
);

INSERT INTO tb_imagens(id_produto, url_imagem) VALUES (1, 'notebook_1.jpg'), (1, 'notebook_2.jpg'),
(1, 'notebook_3.jpg');

INSERT INTO tb_imagens(id_produto, url_imagem) VALUES (2, 'smarttv_1.jpg'), (2, 'smarttv_2.jpg');

INSERT INTO tb_imagens(id_produto, url_imagem) VALUES (3, 'smartphone_1.jpg');